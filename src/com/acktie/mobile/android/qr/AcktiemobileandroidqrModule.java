/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.acktie.mobile.android.qr;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;

import net.sourceforge.zbar.Image;
import net.sourceforge.zbar.ImageScanner;
import net.sourceforge.zbar.Symbol;
import net.sourceforge.zbar.SymbolSet;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;
import org.appcelerator.titanium.util.TiIntentWrapper;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import com.acktie.mobile.android.qr.zbar.ZBarManager;
import com.google.common.io.Files;

import android.app.Activity;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.provider.MediaStore;

@Kroll.module(name = "Acktiemobileandroidqr", id = "com.acktie.mobile.android.qr")
public class AcktiemobileandroidqrModule extends KrollModule {
	
	private static final String moduleId = "com.acktie.mobile.android.qr";
	private static int[] QR_CODE_SYMBOL= {
		Symbol.QRCODE
	};
	
	static {
		System.loadLibrary("iconv");
	}

	// Standard Debugging variables
	private static final String LCAT = "AcktiemobileandroidqrModule";
	private static final boolean DBG = TiConfig.LOGD;
	private int requestCode = 0;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public AcktiemobileandroidqrModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is
		// created
	}

	@Kroll.method
	public void scanQRFromAlbum(KrollDict options) {
		if (DBG) {
			Log.d(LCAT, "scanQRFromAlbum called");
		}

		final String SUCCESS_CALLBACK = "success";
		final KrollFunction successCallback;
		
		final String CANCEL_CALLBACK = "cancel";
		final KrollFunction cancelCallback;
		
		if (hasProperty(SUCCESS_CALLBACK)) {
			successCallback = (KrollFunction) getProperty(SUCCESS_CALLBACK);
		}
		else
		{
			successCallback = null;
		}
		
		if (hasProperty(CANCEL_CALLBACK)) {
			cancelCallback = (KrollFunction) getProperty(CANCEL_CALLBACK);
		}
		else
		{
			cancelCallback = null;
		}
		
		Activity activity = TiApplication.getInstance().getCurrentActivity();
		TiActivitySupport activitySupport = (TiActivitySupport) activity;

		TiIntentWrapper galleryIntent = new TiIntentWrapper(new Intent());
		galleryIntent.getIntent().setAction(Intent.ACTION_PICK);
		galleryIntent.getIntent().setType("image/*");
		galleryIntent.getIntent().addCategory(Intent.CATEGORY_DEFAULT);
		galleryIntent
				.setWindowId(TiIntentWrapper.createActivityName("GALLERY"));

		final int code = activitySupport.getUniqueResultCode();
		activitySupport.launchActivityForResult(galleryIntent.getIntent(),
				code, new TiActivityResultHandler() {
					Bitmap bitmap = null;
					
					public void onResult(Activity activity, int requestCode,
							int resultCode, Intent data) {
						Log.e(LCAT, "OnResult called: " + resultCode);
						if (resultCode == Activity.RESULT_CANCELED) 
						{
							if(cancelCallback != null)
							{
								cancelCallback.callAsync(getKrollObject(), new HashMap());
							}
						} else {
							String path = getRealPathFromURI(data.getData());
							System.out.println("Image Path:" + path);
							
							if(path!= null)
							{
								bitmap = BitmapFactory.decodeFile(path);
								int width = bitmap.getWidth();
								int height = bitmap.getHeight();
								bitmap.recycle();
								bitmap = null;
								
								byte[] byteArray = null;
								try {
									byteArray = Files.toByteArray(new File(path));
								} catch (IOException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}

								
								ImageScanner scanner = ZBarManager.getImageScannerInstance(QR_CODE_SYMBOL);
								
								// Supported image formats
								// http://sourceforge.net/apps/mediawiki/zbar/index.php?title=Supported_image_formats
								Image barcode = ZBarManager.getImageInstance(width, height, "NV21", byteArray);

								int result = scanner.scanImage(barcode);
								
								System.out.println("result of scan: " + result);
								
								byteArray = null;
								
								int quality = 0;
								Symbol symbol = null;
								
								if (result != 0) 
								{
									SymbolSet syms = scanner.getResults();
									for (Symbol sym : syms) {
										System.out.println("Quality of Scan (Higher than 0 is good): " + sym.getQuality());
										if(sym.getQuality() > quality)
										{
											symbol = sym;
										}
									}

									if(symbol != null && successCallback != null)
									{
										HashMap results = new HashMap();
										
										results.put("data", symbol.getData());
										results.put("type", symbol.getType());
										
										successCallback.callAsync(getKrollObject(), results);
									}
								}
								else
								{
									// do error callback
								}
							}
						}
					}

					public void onError(Activity activity, int requestCode,
							Exception e) {
						String msg = "Gallery problem: " + e.getMessage();
						Log.e(LCAT, msg, e);
					}
				});
	}
	
	public String getRealPathFromURI(Uri contentUri) {
        String [] proj = {MediaStore.Images.Media.DATA};
        Cursor cursor = TiApplication.getAppRootOrCurrentActivity().managedQuery( contentUri, proj, null, null,null);
        
        if (cursor == null)
        {
        	return null;
        }
 
        int column_index    = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
        cursor.moveToFirst();
        return cursor.getString(column_index);
    }

	public static String getModuleid() {
		return moduleId;
	}
}
